// InitialPage.tsx
import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import "./design/initial.css";
import {
  Typography,
  Form,
  Input,
  DatePicker,
  TimePicker,
  InputNumber,
  Button,
  Row,
  Col,
  message,
  Select,
  Spin,
} from "antd";
import dayjs from "dayjs";

import type { InitialSymtoms } from "../../../interface/initailPatient/initailSym";
import {
  PatientAPI,
  ServiceToSymtomsAPI,
  PatientSymptomsAPI,
} from "../../../services/patient/patientApi";
import { splitToDateAndTime } from "./utils/dateTime";
import { useSyncDateTime } from "../../../hooks/syncDateTime";

const { Title } = Typography;

// ‚úÖ sleep ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
function sleep(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

const InitialPage: React.FC = () => {
  const [symptomsForm] = Form.useForm<InitialSymtoms>();
  const [messageApi, contextHolder] = message.useMessage();
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [serviceOptions, setServiceOptions] = useState<
    { label: string; value: number }[]
  >([]);
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();

  // ‚úÖ ‡∏£‡∏ß‡∏° date+time ‚Üí visit (local RFC3339) ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  useSyncDateTime(symptomsForm, "visitDateOnly", "visitTimeOnly", "visit");

  useEffect(() => {
    if (!id) return;

    const run = async () => {
      try {
        setLoading(true);
        await Promise.all([fetchPatient(), fetchService()]);
      } finally {
        setLoading(false);
      }
    };

    run();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);

  const fetchPatient = async () => {
    try {
      const resp = await PatientAPI.getByID(Number(id));
      const data = resp?.data ?? resp ?? {};

      // ‡πÅ‡∏ï‡∏Å visit ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏¢‡∏Å‡πÅ‡∏™‡∏î‡∏á
      const v = data.visit ?? data.visitDate ?? data.Visit ?? data.visit_date;
      const { dateOnly, timeOnly } = splitToDateAndTime(v);

      symptomsForm.setFieldsValue({
        ...data,
        visitDateOnly: dateOnly,
        visitTimeOnly: timeOnly,
      });
    } catch (e) {
      console.error(e);
      messageApi.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ");
    }
  };

  const fetchService = async () => {
    try {
      const res = await ServiceToSymtomsAPI.getService(); // GET /api/services
      const rows =
        (Array.isArray(res) && res) || (Array.isArray(res?.data) && res.data) || [];
      setServiceOptions(
        rows.map((s: any) => ({
          value: Number(s.ID ?? s.id),
          label: s.NameService ?? s.name ?? "",
        }))
      );
    } catch (e) {
      console.error(e);
      messageApi.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£");
    }
  };

  const onFinish = async (values: any) => {
    const key = "saving-symptom";
    try {
      setSubmitting(true);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö contextHolder ‡πÑ‡∏î‡πâ)
      messageApi.open({
        key,
        type: "loading",
        content: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£...",
        duration: 0,
      });

      await PatientSymptomsAPI.createSymtom(id!, values);

      // ‡∏õ‡∏¥‡∏î/‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ loading ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
      messageApi.destroy(key);

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡∏î‡πâ‡∏ß‡∏¢ global message (‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏à‡∏ô‡∏µ‡πâ)
      message.success({
        content: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        duration: 1.5,
      });

      // üîî ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ HomePage ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      window.dispatchEvent(new Event("visit:changed"));

      // üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Äú‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‚Äù ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å)
      requestAnimationFrame(() => {
        navigate("/admin/patient");
        // ‡∏´‡∏£‡∏∑‡∏≠ navigate(`/admin/patient/patient-history/${id}`);
      });
    } catch (e: any) {
      console.error(e);
      const msg = e?.response?.data?.error || e?.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      // ‡πÉ‡∏ä‡πâ instance ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      messageApi.open({
        key,
        type: "error",
        content: msg,
        duration: 2,
      });
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="wrapper">
      {contextHolder}

      <Spin fullscreen spinning={submitting} />

      <div className="header">
        <Title level={3}>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</Title>
      </div>

      <div style={{ paddingLeft: "3rem", paddingRight: "3rem" }}>
        <Spin spinning={loading}>
          <Form
            form={symptomsForm}
            layout="vertical"
            onFinish={onFinish}
            initialValues={{}}
            disabled={submitting}
          >
            {/* ----------------------- */}
            {/* ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ */}
            <Row gutter={[24, 12]}>
              <Col md={4}>
                <Form.Item label="‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ">
                  <Input value={id} readOnly />
                </Form.Item>
              </Col>
              <Col md={5}>
                <Form.Item name="citizenID" label="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô">
                  <Input readOnly />
                </Form.Item>
              </Col>
              <Col md={3}>
                <Form.Item name="prefix" label="‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤">
                  <Input readOnly />
                </Form.Item>
              </Col>
              <Col md={4}>
                <Form.Item name="firstname" label="‡∏ä‡∏∑‡πà‡∏≠">
                  <Input readOnly />
                </Form.Item>
              </Col>
              <Col md={4}>
                <Form.Item name="lastname" label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
                  <Input readOnly />
                </Form.Item>
              </Col>
              <Col md={4}>
                <Form.Item name="nickname" label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô">
                  <Input readOnly />
                </Form.Item>
              </Col>
            </Row>

            {/* ----------------------- */}
            {/* ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡∏µ‡∏û‡∏à‡∏£ / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô */}
            <Row gutter={[24, 12]}>
              <Col xs={14} sm={8} md={6}>
                <Form.Item
                  name="serviceID"
                  label="‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°"
                  rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" }]}
                >
                  <Select
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏°"
                    options={serviceOptions}
                    optionFilterProp="label"
                    showSearch
                  />
                </Form.Item>
              </Col>
              <Col xs={14} sm={8} md={5}>
                <Form.Item name="heartrate" label="Heart Rate">
                  <Input placeholder="‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" />
                </Form.Item>
              </Col>
              <Col xs={14} sm={8} md={5}>
                <Form.Item name="systolic" label="Systolic">
                  <InputNumber style={{ width: "100%" }} placeholder="mmHg" />
                </Form.Item>
              </Col>
              <Col xs={14} sm={8} md={5}>
                <Form.Item name="diastolic" label="Diastolic">
                  <InputNumber style={{ width: "100%" }} placeholder="mmHg" />
                </Form.Item>
              </Col>
            </Row>

            {/* ----------------------- */}
            {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà + ‡πÄ‡∏ß‡∏•‡∏≤ */}
            <Row gutter={[24, 12]}>
              <Col md={3}>
                <Form.Item
                  name="weight"
                  label="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"
                  rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å" }]}
                >
                  <InputNumber
                    style={{ width: "100%" }}
                    placeholder="kg"
                    min={0}
                  />
                </Form.Item>
              </Col>
              <Col md={3}>
                <Form.Item
                  name="height"
                  label="‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á"
                  rules={[{ required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á" }]}
                >
                  <InputNumber
                    style={{ width: "100%" }}
                    placeholder="‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£"
                    min={0}
                  />
                </Form.Item>
              </Col>
              <Col xs={14} sm={8} md={5}>
                <Form.Item
                  name="visitDateOnly"
                  label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                  rules={[{ required: true, message: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" }]}
                  getValueProps={(v) => ({ value: v ? dayjs(v) : v })}
                >
                  <DatePicker
                    style={{ width: "100%" }}
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
                  />
                </Form.Item>
              </Col>
              <Col xs={14} sm={8} md={5}>
                <Form.Item
                  name="visitTimeOnly"
                  label="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                  rules={[{ required: true, message: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤" }]}
                  getValueProps={(v) => ({ value: v ? dayjs(v) : v })}
                >
                  <TimePicker
                    style={{ width: "100%" }}
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"
                    format="HH:mm"
                  />
                </Form.Item>
              </Col>
            </Row>

            <Form.Item name="visit" hidden>
              <Input type="hidden" />
            </Form.Item>

            {/* ----------------------- */}
            {/* ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ */}
            <Row gutter={[24, 12]}>
              <Col xs={24} md={16}>
                <Form.Item name="symptomps" label="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£">
                  <Input.TextArea
                    rows={3}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏ß‡∏î‡∏ü‡∏±‡∏ô‡∏ã‡∏µ‡πà‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ß‡∏ü‡∏±‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡πá‡∏ô"
                  />
                </Form.Item>
              </Col>
            </Row>

            {/* ----------------------- */}
            {/* ‡∏õ‡∏∏‡πà‡∏° */}
            <Form.Item>
              <div style={{ display: "flex", gap: 12 }}>
                <Button type="primary" htmlType="submit" loading={submitting}>
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                </Button>
                <Button htmlType="button" onClick={() => window.history.back()}>
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </Button>
              </div>
            </Form.Item>
          </Form>
        </Spin>
      </div>
    </div>
  );
};

export default InitialPage;

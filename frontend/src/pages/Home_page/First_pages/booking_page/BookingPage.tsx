import React, { useEffect, useMemo, useState } from "react";
import {
  Layout,
  Card,
  Row,
  Col,
  Form,
  Input,
  DatePicker,
  Radio,
  Button,
  Space,
  message,
  Alert,
  Select,
  Spin,
  Table,
  Divider,
} from "antd";
import type { ColumnsType } from "antd/es/table";
import type { Dayjs } from "dayjs";
import dayjs from "dayjs";
import "dayjs/locale/th";
import {
  CalendarOutlined,
  PhoneOutlined,
  UserOutlined,
  SearchOutlined,
} from "@ant-design/icons";
import SiteHeader from "./siteHeader";
import {
  TimeSlot,
  IServiceItem,
  createBooking,
  getCapacityByDate,
  getService,
} from "../../../../services/booking/bookingApi";
import type {
  CapacitySummary,
  ServiceItem,
  Slottime,
  UpdateSlot,
  QueueSlot,
  CreateBooking,
  SummaryBooking,
} from "../../../../interface/bookingQueue";
import { searchBookings } from "../../../../services/booking/bookingApi";

dayjs.locale("th");
const { Content } = Layout;

const timeSlotLabel: Record<TimeSlot, string> = {
  morning: "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ (09:00‚Äì12:00)",
  afternoon: "‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢ (13:00‚Äì17:00)",
  evening: "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏¢‡πá‡∏ô (18:00‚Äì20:00)",
};

function toTime(hhmm: string) {
  return `${hhmm.slice(0, 2)}:${hhmm.slice(2)}`;
}

const BookingPage: React.FC = () => {
  const [form] = Form.useForm();
  const [searchForm] = Form.useForm();

  // Booking form states
  const [slot, setSlot] = useState<TimeSlot | undefined>(undefined);
  const [date, setDate] = useState<Dayjs | null>(null);
  const [services, setServices] = useState<IServiceItem[]>([]);
  const [loadingCapacity, setLoadingCapacity] = useState(false);
  const [loadingServices, setLoadingServices] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // Search states
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchResults, setSearchResults] = useState<SummaryBooking[]>([]);
  const [showSearchResults, setShowSearchResults] = useState(false);

  // Watch form values for summary
  const firstName = Form.useWatch("firstName", form);
  const lastName = Form.useWatch("lastName", form);
  const phone = Form.useWatch("phone", form);
  const serviceId = Form.useWatch("serviceId", form);

  // Capacity state
  const [capacity, setCapacity] = useState<CapacitySummary>({
    morning: 0,
    afternoon: 0,
    evening: 0,
  });

  // Disable past dates
  const disabledDate = (current: Dayjs) =>
    current.startOf("day").isBefore(dayjs().startOf("day"));

  const loadServices = async () => {
    try {
      setLoadingServices(true);
      const response = await getService();
      setServices(response);
    } catch (e) {
      message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ");
      setServices([]);
    } finally {
      setLoadingServices(false);
    }
  };

  useEffect(() => {
    loadServices();
  }, []);

  // Load capacity when date changes
  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà useEffect ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
  useEffect(() => {
    (async () => {
      if (!date) {
        setCapacity({ morning: 0, afternoon: 0, evening: 0 });
        setSlot(undefined);
        return;
      }
      setLoadingCapacity(true);
      try {
        const cap = await getCapacityByDate(date);
        setCapacity(cap);

        // ‡∏ñ‡πâ‡∏≤ slot ‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
        setSlot((prev) => (prev && cap[prev] > 0 ? prev : undefined));
      } catch {
        message.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ");
        setCapacity({ morning: 0, afternoon: 0, evening: 0 });
        setSlot(undefined);
      } finally {
        setLoadingCapacity(false);
      }
    })();
  }, [date]); // ‚úÖ ‡∏ú‡∏π‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ date
  const allFull = !loadingCapacity && Math.max(...Object.values(capacity)) <= 0;

  // Summary for booking
  const summary = useMemo(
    () => ({
      name: firstName && lastName ? `${firstName} ${lastName}` : "‚Äî",
      phone: phone || "‚Äî",
      service: services.find((s) => s.id === serviceId)?.name ?? "‚Äî",
      date: date ? date.format("DD MMMM YYYY") : "‚Äî",
      slot: slot ? timeSlotLabel[slot] : "‚Äî",
    }),
    [firstName, lastName, phone, serviceId, services, date, slot]
  );

  // Enhanced search function - supports phone and date
  // ... ‡πÉ‡∏ô BookingPage.tsx

  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà handleSearch ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const handleSearch = async (values: {
    phone_number?: string;
    date?: Dayjs;
  }) => {
    const rawPhone = values.phone_number?.toString().trim() ?? "";
    const phone = rawPhone ? rawPhone.replace(/\D/g, "") : "";
    const dateStr = values.date ? values.date.format("YYYY-MM-DD") : undefined;

    if (!phone && !dateStr) {
      message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà");
      return;
    }

    setSearchLoading(true);
    try {
      let results: SummaryBooking[] = [];

      if (phone) {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡∏Å‡πá‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
        results = await searchBookings(phone, dateStr);
      } else {
        message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á");
        return;
      }

      setSearchResults(results);
      setShowSearchResults(true);

      if (results.length === 0) {
        message.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
      } else {
        message.success(`‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      }
    } catch (e: any) {
      message.error(e?.response?.data?.error ?? "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setSearchResults([]);
    } finally {
      setSearchLoading(false);
    }
  };

  const handleSubmit = async (values: any) => {
    if (!date || !slot) {
      message.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á");
      return;
    }
    if (capacity[slot as TimeSlot] <= 0) {
      message.error("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô");
      return;
    }
    if (!values.serviceId) {
      message.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£");
      return;
    }
  
    const payload: CreateBooking = {
      firstName: values.firstName,
      lastName: values.lastName,
      // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ä‡∏∑‡πà‡∏≠ 'phone' ‡πÅ‡∏ï‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'phone_number'
      phone_number: values.phone,
      serviceId: values.serviceId,
      dateText: date.format("YYYY-MM-DD"),
      timeSlot: slot, // "morning" | "afternoon" | "evening"
    };
  
    try {
      setSubmitting(true);
  
      // üî• ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÜ
      const result = await createBooking(payload); 
      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ backend ‡∏Ñ‡∏∑‡∏ô hhmm/segment ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      message.success(
        result?.hhmm
          ? `‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏ß‡∏•‡∏≤ ${result.hhmm.slice(0,2)}:${result.hhmm.slice(2)}`
          : "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
      );
  
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
      const fresh = await getCapacityByDate(date);
      setCapacity(fresh);
  
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°
      form.resetFields();
      setSlot(undefined);
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ:
      // setDate(null);
    } catch (err: any) {
      message.error(err?.response?.data?.error ?? "‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setSubmitting(false);
    }
  };
  

  // Table columns for search results
  const searchResultColumns: ColumnsType<SummaryBooking> = [
    {
      title: "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•",
      key: "name",
      render: (_, r) =>
        `${r.firstName ?? ""} ${r.lastName ?? ""}`.trim() || "‚Äî",
    },
    {
      title: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
      dataIndex: "phone_number",
      key: "phone",
      render: (v) => v ?? "‚Äî",
    },
    {
      title: "‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤",
      key: "datetime",
      render: (_, r) => {
        const dd = r.date ? dayjs(r.date) : null;
        const dateStr =
          dd && dd.isValid() ? dd.format("DD/MM/YYYY") : r.date ?? "‚Äî";
        return `${dateStr} `;
      },
    },
    {
      title: "‡∏ä‡πà‡∏ß‡∏á",
      dataIndex: "segment",
      key: "segment",
      render: (s: TimeSlot) => (s ? timeSlotLabel[s] ?? s : "‚Äî"),
    },
    {
      title: "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
      dataIndex: "service_name",
      key: "service_name",
      render: (v) => v ?? "‚Äî",
    },
  ];

  return (
    <Layout style={{ minHeight: "100vh", background: "#F3EDF9" }}>
      <SiteHeader />

      {/* Enhanced Search Section */}
      <Row justify="center" style={{ marginTop: 16 }}>
        <Col xs={24} lg={22} xxl={18}>
          <Card
            bordered={false}
            style={{ borderRadius: 20 }}
            title="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"
            headStyle={{ borderBottom: "none" }}
          >
            <Form
              form={searchForm}
              layout="inline"
              onFinish={handleSearch}
              style={{ marginBottom: 16 }}
            >
              <Form.Item
                name="phone_number"
                label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
                style={{ minWidth: 200 }}
              >
                <Input
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô 0891234567"
                  prefix={<PhoneOutlined />}
                  allowClear
                />
              </Form.Item>

              <Form.Item name="date" label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" style={{ minWidth: 200 }}>
                <DatePicker
                  placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
                  format="DD/MM/YYYY"
                  allowClear
                  style={{ width: "100%" }}
                />
              </Form.Item>

              <Form.Item>
                <Button
                  type="primary"
                  htmlType="submit"
                  loading={searchLoading}
                  icon={<SearchOutlined />}
                >
                  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                </Button>
              </Form.Item>

              <Form.Item>
                <Button
                  onClick={() => {
                    searchForm.resetFields();
                    setSearchResults([]);
                    setShowSearchResults(false);
                  }}
                >
                  ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </Button>
              </Form.Item>
            </Form>

            {showSearchResults && (
              <Table
                rowKey={(record) =>
                  record.id ??
                  `${record.date}-${record.hhmm}-${record.phone_number}`
                }
                loading={searchLoading}
                columns={searchResultColumns}
                dataSource={searchResults}
                pagination={{ pageSize: 10, showSizeChanger: true }}
                size="middle"
                scroll={{ x: 800 }}
              />
            )}
          </Card>
        </Col>
      </Row>

      <Divider style={{ margin: "32px 0" }} />

      {/* Original Booking Form */}
      <Content>
        <div
          style={{
            padding: "32px 16px",
            background: "#F3EDF9",
            minHeight: "calc(100vh - 64px)",
          }}
        >
          <Row justify="center">
            <Col xs={24} lg={22} xxl={18}>
              <Row gutter={[24, 24]}>
                {/* Form */}
                <Col xs={24} lg={14}>
                  <Card
                    title="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß"
                    bordered={false}
                    style={{ borderRadius: 20 }}
                    headStyle={{ borderBottom: "none" }}
                    bodyStyle={{ paddingTop: 0 }}
                  >
                    <Form
                      form={form}
                      layout="vertical"
                      onFinish={handleSubmit}
                      requiredMark="optional"
                      style={{ marginTop: 8 }}
                      disabled={submitting}
                    >
                      <Row gutter={16}>
                        <Col xs={24} md={12}>
                          <Form.Item
                            label="‡∏ä‡∏∑‡πà‡∏≠"
                            name="firstName"
                            rules={[
                              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" },
                            ]}
                          >
                            <Input
                              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"
                              prefix={<UserOutlined />}
                            />
                          </Form.Item>
                        </Col>
                        <Col xs={24} md={12}>
                          <Form.Item
                            label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                            name="lastName"
                            rules={[
                              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" },
                            ]}
                          >
                            <Input
                              placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                              prefix={<UserOutlined />}
                            />
                          </Form.Item>
                        </Col>
                      </Row>

                      <Row gutter={16}>
                        <Col xs={24} md={12}>
                          <Form.Item
                            label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
                            name="phone"
                            rules={[
                              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" },
                              {
                                pattern: /^0\d{8,9}$/,
                                message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                              },
                            ]}
                          >
                            <Input
                              placeholder="08xxxxxxxx"
                              prefix={<PhoneOutlined />}
                            />
                          </Form.Item>
                        </Col>

                        <Col xs={24} md={12}>
                          <Form.Item label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô" required>
                            <DatePicker
                              allowClear
                              style={{ width: "100%" }}
                              format="DD/MM/YYYY"
                              placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô"
                              disabledDate={disabledDate}
                              onChange={(d) => setDate(d)}
                              suffixIcon={<CalendarOutlined />}
                            />
                          </Form.Item>
                        </Col>
                      </Row>

                      <Row gutter={16}>
                        <Col xs={24} md={12}>
                          <Form.Item
                            label="‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                            name="serviceId"
                            rules={[
                              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" },
                            ]}
                          >
                            <Select
                              placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                              loading={loadingServices}
                              options={services.map((s) => ({
                                value: s.id,
                                label: s.name,
                              }))}
                              notFoundContent={
                                loadingServices ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î..." : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                              }
                              showSearch
                              filterOption={(input, option) =>
                                (option?.label as string)
                                  .toLowerCase()
                                  .includes(input.toLowerCase())
                              }
                            />
                          </Form.Item>
                        </Col>

                        <Col xs={24} md={12}>
                          <Form.Item label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤" required>
                            {allFull && date && (
                              <Alert
                                style={{ marginBottom: 12 }}
                                type="error"
                                showIcon
                                message="‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
                              />
                            )}
                            <Spin spinning={loadingCapacity}>
                              <Radio.Group
                                onChange={(e) =>
                                  setSlot(e.target.value as TimeSlot)
                                }
                                value={slot}
                                style={{
                                  display: "flex",
                                  gap: 8,
                                  flexWrap: "wrap",
                                }}
                                disabled={!date}
                              >
                                <Radio.Button
                                  value="morning"
                                  disabled={capacity.morning <= 0}
                                >
                                  ‡πÄ‡∏ä‡πâ‡∏≤{" "}
                                  {capacity.morning <= 0
                                    ? "(‡πÄ‡∏ï‡πá‡∏°)"
                                    : `(${capacity.morning} ‡∏Ñ‡∏¥‡∏ß)`}
                                </Radio.Button>
                                <Radio.Button
                                  value="afternoon"
                                  disabled={capacity.afternoon <= 0}
                                >
                                  ‡∏ö‡πà‡∏≤‡∏¢{" "}
                                  {capacity.afternoon <= 0
                                    ? "(‡πÄ‡∏ï‡πá‡∏°)"
                                    : `(${capacity.afternoon} ‡∏Ñ‡∏¥‡∏ß)`}
                                </Radio.Button>
                                <Radio.Button
                                  value="evening"
                                  disabled={capacity.evening <= 0}
                                >
                                  ‡πÄ‡∏¢‡πá‡∏ô{" "}
                                  {capacity.evening <= 0
                                    ? "(‡πÄ‡∏ï‡πá‡∏°)"
                                    : `(${capacity.evening} ‡∏Ñ‡∏¥‡∏ß)`}
                                </Radio.Button>
                              </Radio.Group>
                            </Spin>
                          </Form.Item>
                        </Col>
                      </Row>

                      <Space
                        size="middle"
                        style={{
                          width: "100%",
                          justifyContent: "flex-end",
                          marginTop: 8,
                        }}
                      >
                        <Button
                          onClick={() => {
                            form.resetFields();
                            setDate(null);
                            setSlot(undefined);
                            setCapacity({
                              morning: 0,
                              afternoon: 0,
                              evening: 0,
                            });
                          }}
                        >
                          ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </Button>
                        <Button
                          type="primary"
                          htmlType="submit"
                          loading={submitting}
                          disabled={
                            !date || !slot || capacity[slot as TimeSlot] <= 0
                          }
                        >
                          ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        </Button>
                      </Space>
                    </Form>
                  </Card>
                </Col>

                {/* Summary */}
                <Col xs={24} lg={10}>
                  <Card
                    bordered={false}
                    style={{
                      borderRadius: 20,
                      background:
                        "linear-gradient(135deg,#FFFFFF 0%, #F0E9FF 100%)",
                    }}
                    headStyle={{ borderBottom: "none" }}
                    title="‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"
                  >
                    <div
                      style={{
                        border: "1px dashed #CBB6FA",
                        borderRadius: 16,
                        padding: 16,
                        background: "#fff",
                      }}
                    >
                      <Row style={{ marginBottom: 8 }}>
                        <Col span={10}>
                          <strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•</strong>
                        </Col>
                        <Col span={14}>{summary.name}</Col>
                      </Row>
                      <Row style={{ marginBottom: 8 }}>
                        <Col span={10}>
                          <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</strong>
                        </Col>
                        <Col span={14}>{summary.phone}</Col>
                      </Row>
                      <Row style={{ marginBottom: 8 }}>
                        <Col span={10}>
                          <strong>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</strong>
                        </Col>
                        <Col span={14}>{summary.service}</Col>
                      </Row>
                      <Row style={{ marginBottom: 8 }}>
                        <Col span={10}>
                          <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</strong>
                        </Col>
                        <Col span={14}>{summary.date}</Col>
                      </Row>
                      <Row>
                        <Col span={10}>
                          <strong>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</strong>
                        </Col>
                        <Col span={14}>{summary.slot}</Col>
                      </Row>
                    </div>
                  </Card>
                </Col>
              </Row>
            </Col>
          </Row>
        </div>
      </Content>
    </Layout>
  );
};

export default BookingPage;
